1. What is React and what are its key features?
2. Explain the concept of virtual DOM in React.
3. What is JSX in React? How does it differ from regular HTML?
4. What are React components? Explain the difference between functional and class components.
5. How do you pass data from a parent component to a child component in React?
6. What is state in React? How is it different from props?
7. What is the significance of the key prop in React when rendering lists?
8. Explain the lifecycle methods in React class components.
9. What are React hooks? Name some built-in hooks and explain their purpose.
10. How does React Router work? How can you handle routing in a React application?
11. Why not indexes as key.
12. Difference between state and props.
13. What are React hooks? Explain some commonly used hooks and their purposes.
14. What is the difference between functional components and class components in React? When would you choose one over the other?
15. How does state management work in React? Explain the role of useState and useEffect hooks in managing state and side effects.
16. What are controlled components in React? How do they differ from uncontrolled components?
17. Explain the concept of context in React and how it can be used for global state management.
18. What is the purpose of the memo function in React? How does it optimize component rendering?
19. How does React handle error boundaries? Explain the concept of error handling in React.
20. What are React portals? In what scenarios would you use them?
21. Explain the concept of higher-order components (HOCs) in React. How can they be used for code reuse and component composition?
22. What is the difference between HOCs and hooks
23. Where to use hooks and where HOCs.
24. What are cons and pros of hooks.
25. What is react Fiber.
26. What is JSX.
27. Describe data flow in React.
28. What is new in react 18.
29. If you have react 17 and want to install react 18 in your existing project, which kind of steps you need to follow.
30. See Example how to make it?
31. Difference between useEffect and useLayoutEffect.

11. It affects on recouncilation and performance.

    Initially, the list is rendered with keys based on the index of each item.
    When an item is removed from the middle of the array, the index of the remaining items shifts.
    React performs a diffing algorithm to reconcile the previous and updated lists. It compares items based on their keys.
    Since the key (index) of the removed item no longer exists in the updated list, React can't match it with a corresponding item. 
    As a result, it identifies the wrong item to remove or update, leading to incorrect rendering.

22-23.

Higher-Order Components (HOCs) and hooks are two different approaches in React for achieving code reuse and component composition:

    Higher-Order Components (HOCs):

        HOCs are functions that take a component as input and return an enhanced version of that component.
        They enable code reuse and allow you to add additional behaviors or functionality to components.
        HOCs achieve this by wrapping the input component with a container component, providing additional props or modifying the component's behavior.
        HOCs can be used for cross-cutting concerns such as authentication, logging, or handling state management.
        They provide a way to share functionality across different components without duplicating code.
        HOCs are typically created as standalone functions and are used by passing the target component as an argument to the HOC function.
        Example: Redux's connect function is a commonly used HOC that connects a component to the Redux store.
        
    Hooks:

        Hooks are a feature introduced in React 16.8 that allows functional components to have state and use lifecycle methods without the need for class components.
        Hooks provide a more direct and intuitive way to reuse stateful logic within functional components.
        They allow you to use React's built-in hooks like useState, useEffect, useContext, and more to manage component state and handle side effects.
        Hooks promote a more composable and granular approach to code reuse, as they allow you to create and reuse custom hooks that encapsulate specific logic.
        Hooks are used by invoking them directly within the functional component body.
        Hooks offer a simpler and more straightforward alternative to class components by eliminating the need for complex inheritance and the this keyword.
        Example: The useState hook allows you to add local component state to a functional component without needing to convert it to a class component.
        In summary, HOCs are functions that enhance components by wrapping them, while hooks are functions that enable code reuse and stateful logic within functional components.
        Both approaches offer ways to achieve code reuse and composition,
        but hooks provide a more modern and direct approach that simplifies the usage of state and lifecycle methods.



24.

    Pros of using hooks:
        1. Improved Code Organization: Hooks allow you to organize your code in a more readable and cohesive manner by keeping related logic together within the same function. This can lead to cleaner and more maintainable code.

        2. Reusability: Hooks promote code reuse by allowing you to extract and share stateful logic using custom hooks. This makes it easier to share functionality across different components without the need for higher-order components (HOCs) or render props.

        3. Simplicity and Conciseness: Hooks provide a simpler and more intuitive way to work with state and lifecycle methods compared to class components. They reduce the amount of boilerplate code, resulting in more concise and readable code.

        4. Enhanced Testing: With hooks, it becomes easier to test individual units of code. Since hooks are simple functions, you can test them in isolation without the need to mount entire components.

        5. Performance Optimizations: Hooks offer performance optimization options like memoization (`useMemo`, `useCallback`) and fine-grained control over re-renders. This can help optimize rendering performance and improve the overall efficiency of your React application.

    Cons of using hooks:
        1. Learning Curve: If you are already familiar with class components and the lifecycle methods, transitioning to hooks may require some adjustment and learning. Hooks introduce new concepts and patterns that may take time to understand and apply correctly.

        2. Compatibility: Hooks were introduced in React 16.8, so if you're working with older versions of React or dealing with legacy codebases, you may encounter compatibility issues or limitations when trying to integrate hooks.

        3. Tooling and Ecosystem: Since hooks are a relatively new addition to React, the tooling and ecosystem may not be as mature compared to class components. Some existing libraries and components may not fully support hooks yet.

        4. Possible Abstraction Issues: Hooks can make it easier to extract and reuse logic, but they can also lead to excessive abstraction and fragmented code if not used judiciously. Care should be taken to strike a balance between code reuse and code readability/maintainability.

        5. Limited Use in Conditional Hooks: Hooks should not be used conditionally within components (e.g., inside loops or if statements), as the order of hooks must remain the same on each render. This can sometimes limit the flexibility when conditional logic is required.


25. React Fiber was introduced to improve performance of react application, 
    especially when there are complex interactions that should be handled by the user.
        The goal of react fiber is to provide more efficient and flexible way to manage rendering. Benefits of react fiber are.
        1. Incremental Rendering. React fiber allows rendering process to be paused, aborted or resumed which help to keep application responsive.
        2. Prioritization and scheduling. React fiber has priority levels for rendering tasks and ensure to keep user interface responsive even if there are many complex tasks.


28. What is new in react 18.
    1. Automatic Batching.
        it means when we have multiple functions which set new values in the state using one handler all will be done together.
            const handler = () => {
                setNewName('Karen');
                setNewAge(23);
                setNewHeight(185);
            };
    2. Transition.
        Transition is used to distinguish urgent and no urgent tasks, blocking or non-blocking tasks in react.
        We can use transition calling useTransition hook.
        const [isPending, startTransition] = useTransition();     
            isPending property tells us whether there is a pending transition or no.
            startTransition lets us to mark a state update as a transition.

        For example if we have tabs, user clicks on one tab and then changes his mind and clicks another tab, if we mark tabs update as a transtion,
        we will let user to not wait for first tab render, he will immediately see last tab that has been clicked.      
    3. Suspense.
        Before react 18, if there was a component which did a api request inside and had slow behavior that one component will slow dont entire application,
        but with React Suspense it will not slow down entire application it will show for example some loading animation view and minwhile prepare slow component render and will put in the same stream with other components.
        it can be done by wrapping components inside Suspense and pass fallback props as a loading animation or what you need to pass.
    4. React Fiber.
        This feature allows react to interrupt, pause, restart or quite a render.
    5. some client side api changes, new hooks.    



29. The first and the main step that you need to follow is to change index.ts or index.js file. Previously in react 17 there is a render function which renders whole application,
    now in react 18-in there is a createRoot function which accepts selector and prints the application.



30. We have 2 components. If we click on the button the state will be changed and App component will be rendered, but List will be rendered as well.
    How to make List component to not render every time.
    Consider 2 examples, List component with and without props.


    const List = () => {
        console.log('List render');

        return (
            <h2>List</h2>
        )
    };

    const App = () => {
        const [increment, setIncrement] = useState(0);
        console.log('App Render');

        return (
            <div>
                <h1>App component</h1>
                <span>{increment}</span>
                <button onClick={() => setIncrement((prev) => prev + 1)}>Click to increment</button>
                <List />
            </div>   
        )
    };

    
31. What kind of architectural patterns can be used in React.

    1. Component-based Architecture: or sometimes called Component Driven Architecture
    2. Flux Architecture: This pattern is responsible to ensure one directional data flow in react to maintain the state easily.
    3. Container/Presentation Pattern: In this pattern whole application is divided into two parts, Container Components and Presentation Components, Containers to hold the state and Presentations to show UI.
    4. Micro Frontends: In this pattern you break whole application into small independently parts. 
    5. Atomic Design: Divide components into small parts as reusable ui-components and use them in the application.

32. What are some common security considerations when developing React applications, and how can you mitigate potential vulnerabilities?

    1. Cross-Site-Scripting: To prevent unsecure data injection to inputs of application need to properly sanitize inputs, put proper validation and use package such as DOMPurify,.
    2. State Management: Need to properly manage the state of application to prevent unauthorized attempts to application.
    3. API Security: Implement API security properly, for example customize CORS, to restrict domain attacks.


       
33. Explain client side rendering, server side rendering, static site generation, incremental static regeneration.


    Before going through these concepts let's first understand the flow.

    Source Code -> Build -> Server -> Client (Web Browser)

1. Source code is something that we write in the editor.
2. Build process is when we run "npm run build" and the build process is starting, it created a build directory with production build of react application.
3. Server can be either our local static server or netlify vercel or something else.
4. web browser for showing some value.


1. CSR - Client Side Rendering.

    During client side rendering when we write some code and run "npm run dev", 
    the local server (in our case it can be Webpack Dev Server) starts to work and for inital load
    the browser sends request to the local server to get intial html page. 
    Server sends initial html page along with javascript to the clinet and the code starting to execute on the client side,
    so that the initial load of the client side rendering can take some time.

2. SSR - Server Side Rendering.

    The Rendering comparing with the CSR is done on the server side instead of client side.
    So when the browser sends request to get the initial page, the next development server
    which is in our case is local server, sends the fully loaded page to the browser. 
    So every time when we need to navigate to another page or something else, the browser sends request
    to the server to get fully loaded page.

3. SSG - Static Site Generation.

    While using static site generation we should be aware that the application will be generated on build time. What does it mean?
    So basically when we create a web site using static site generation approach we already know which kind of data we need to build the page.
    So we don't need to build every time, because the data can be gone from CMS and we just show it.
    It is very helpful to use in landing pages.

4. ISR - Incremental Static ReGeneration.

    ICR is providing all benefits of static site generaion, but using static site generation we can't update the page when something
    from CMS is changed, so we need to have revalidate property for each page to control the build time.
    

and when would you use each?


35. Where react developer should use useCallback hook ?

useCallback is used to keep the reference of the function which is used inside the component, so that we can use the same reference
of the function while re-rendering the component. The reference will be changed when one of the variables in the dependencies array changes.

There are some examples when we must use useCallback hook.

1. When the function is one of the dependencies array of the useEffect.
        So the handleChange should be used isnide useCallback.

        function Component(){
        const [state, setState] = useState()
        
        // Should use `useCallback`
        function handleChange(input){
            setState(...)
        }

        useEffect(()=>{
            handleChange(...)
        },[handleChange])

        return ...
        }


2. When the function is being passed to their children components. Especially  when it is the dependency of children useEffect.
    If we don't use useCallback it will lead infinite loop.

function Parent(){
  const [state, setState] = useState()
  
  function handleChange(input){
    setState(...)
  }

  return <Child onChange={handleChange} />
}

function Child({onChange}){
  const [state, setState] = useState()
  
  useEffect(()=>{
    onChange(...)
  },[onChange])

  return "Child"
}

3. When you use React Context that holds a state and returns only the state setters functions, 
    you need the consumer of that context to not rerender every time the state update as it may harm the performance.

    const Context = React.createContext();

    function ContextProvider({children}){
    const [state, setState] = useState([]);
    
    // Should use `useCallback`
    const addToState = (input) => {
        setState(prev => [...prev, input]);
    }

    // Should use `useCallback`
    const removeFromState = (input) => {
        setState(prev => prev.filter(elem => elem.id !== input.id));
    }

    // Should use `useCallback` with empty []
    const getState = () => {
        return state;
    }

    const contextValue= React.useMemo(
        () => ({ addToState , removeFromState , getState}),
        [addToState , removeFromState , getState]
    );

    // if we used `useCallback`, our contextValue will never change, and all the subscribers will not re-render
    <Context.Provider value={contextValue}>
        {children}
    </Context.Provider>
    }



4. If you are subscribed to the observer, timer, document events, and need to unsubscribe when the component 
    unmounts or for any other reason. So we need to access the same reference to unsubscribe from it.

    function Component(){
        // should use `useCallback`
        const handler = () => {...}
        
        useEffect(() => {
            element.addEventListener(eventType, handler)
            return () => element.removeEventListener(eventType, handler)
        }, [eventType, element])


        return ...
    }

So there are 4 basic situations when we need to use useCallback
    1. Passing function from parent to child.
    2. Having function that is the dependency of useEffect hook.
    3. Having React Context that holds a state and returns only the state setters functions.
    4. If we subscribed to the observers, events and need to unsubscribe we have to unsubscribe from the same reference that we subsribed and the useCallback is ideal to keep the reference.


36. Explain Webpack ?

    Webpack is a module boundler which takes the module with its all dependencies and generated static assets suitable
    for the browser. Webpack support code splitting which is a technique to split bundle into smaller chunks that can be loadded on demand.
    This technique improves the loading time of the application and load the chunks that are needed for only the current page.


37. Explain useReducer.

    useReducer is similar with useState but it used to keep more complex states like objects as a state and it provides 
    function which is used to change the state.


38. Reconciliation in React.


        Reconciliation is the process when React determines virtual DOM updates.
            1. When the componenent's state or props change, React triggers re-render for component.
            2. The component's render method returns new Virtual DOM.
            3. Using the Diffing Algorithm React compares Virtual DOM tree with Real DOM.
            4. Based on the differences React updates the Real DOM to match with Virtual DOM recent changes.

        React gives some methods to control the Reconciliation process.
            1. componentDidUpdate
            2. shouldComponentUpdate


39. How Hydration Works in Next.js?
        
        Initial Server-Side Render:

            When a user requests a page, Next.js may render the page on the server (SSR)
            or generate static HTML at build time (SSG). 
            The server sends this fully-rendered HTML to the client (the user's browser).
            This HTML includes the content of the page, which makes the page load quickly and 
            allows users to see the content immediately.
            
        Sending JavaScript to the Client:

            Along with the HTML, the server also sends a JavaScript bundle to the client. 
            This bundle contains the React components and other JavaScript needed to make the page interactive.
        
        Hydration Process:

            Once the browser receives the HTML and the JavaScript bundle, 
            it loads the page and then executes the JavaScript.
            During hydration, React "reuses" the pre-rendered HTML and attaches event
            listeners and state to make the page interactive. Essentially, 
            React takes control of the existing HTML and turns it into a fully interactive 
            React application without re-rendering the entire page.